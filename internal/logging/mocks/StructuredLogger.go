// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	logger "github.com/Koshsky/subs-service/auth-service/internal/logging"
	mock "github.com/stretchr/testify/mock"
)

// StructuredLogger is an autogenerated mock type for the StructuredLogger type
type StructuredLogger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: message, params
func (_m *StructuredLogger) Debug(message string, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: message, params
func (_m *StructuredLogger) Error(message string, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: message, params
func (_m *StructuredLogger) Fatal(message string, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: message, params
func (_m *StructuredLogger) Info(message string, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// Log provides a mock function with given fields: message, params
func (_m *StructuredLogger) Log(message string, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// LogWithLevel provides a mock function with given fields: level, message, params
func (_m *StructuredLogger) LogWithLevel(level logger.LogLevel, message string, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, level, message)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: message, params
func (_m *StructuredLogger) Warn(message string, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// NewStructuredLogger creates a new instance of StructuredLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStructuredLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *StructuredLogger {
	mock := &StructuredLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
