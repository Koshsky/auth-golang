name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.24, 1.25]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: |
        export CGO_ENABLED=1
        go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        echo "Coverage report generated: coverage.html"
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: matrix.go-version == '1.24'
      with:
        name: coverage-report
        path: coverage.html
        retention-days: 30
        
    - name: Show coverage summary
      run: |
        echo "=== Coverage Summary ==="
        go tool cover -func=coverage.out | tail -1
        echo "========================="

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install gosec
      run: |
        curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Run gosec security scanner
      run: |
        gosec -fmt sarif -out results.sarif ./... || true
        # Check if file was created and has content
        if [ -f results.sarif ] && [ -s results.sarif ]; then
          echo "SARIF file created successfully"
          ls -la results.sarif
        else
          echo "SARIF file not created or empty, creating minimal SARIF"
          echo '{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"gosec","version":"unknown"}},"results":[]}]}' > results.sarif
        fi

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name == 'push'
      with:
        sarif_file: results.sarif
      continue-on-error: true

    - name: Display security results
      if: always()
      run: |
        echo "=== Security Scan Results ==="
        if [ -f results.sarif ]; then
          # Show summary of findings
          jq -r '.runs[].results[] | "Issue: \(.message.text // "Unknown") in \(.locations[0].physicalLocation.artifactLocation.uri // "Unknown file")"' results.sarif 2>/dev/null || echo "No security issues found or unable to parse results"
        else
          echo "No SARIF file found"
        fi
        echo "=========================="

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/auth-golang
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docker-release:
    name: Create Docker Release
    runs-on: ubuntu-latest
    needs: [docker]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body: |
          ## üê≥ Docker Release
          
          **Docker Images:**
          - `${{ secrets.DOCKER_USERNAME }}/auth-golang:${{ github.ref_name }}`
          - `${{ secrets.DOCKER_USERNAME }}/auth-golang:latest`
          
          **Pull and Run:**
          ```bash
          docker pull ${{ secrets.DOCKER_USERNAME }}/auth-golang:${{ github.ref_name }}
          docker run -p 50051:50051 ${{ secrets.DOCKER_USERNAME }}/auth-golang:${{ github.ref_name }}
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
